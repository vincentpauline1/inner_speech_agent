"""
Script to export repetitions of speech sequences by trained CommunicativeAgent models.

This script loads trained CommunicativeAgent models and uses them to repeat speech sequences
from specified datasets. The repetitions are exported as articulatory and cepstral features
for later analysis and evaluation.

Key functionality:
- Loads trained models with different configurations (jerk loss weights, random seeds)
- Processes speech sequences from specified datasets 
- Exports model repetitions as articulatory and cepstral features
"""

from tqdm import tqdm
from communicative_agent import CommunicativeAgent
from lib.dataset_wrapper import Dataset
from lib import utils

# Configuration constants
DATASETS = [
    "pb2007",  # Dataset to process
]
NB_TRAINING = 5  # Number of training runs with different random seeds
JERK_LOSS_WEIGHTS = [0, 0.15]  # Jerk regularization weights used during training


def export_agent_repetitions(agent, agent_name):
    """
    Export repetitions generated by a trained agent for all sequences in specified datasets.
    
    For each sequence, the agent generates repetitions and exports:
    1. Estimated articulatory trajectories
    2. Repeated cepstral features
    
    Args:
        agent (CommunicativeAgent): Trained agent model to generate repetitions
        agent_name (str): Identifier for the agent model used in output paths
    """
    for dataset_name in DATASETS:
        print("%s repeats %s" % (agent_name, dataset_name))
        
        # Load dataset and get sound features
        dataset = Dataset(dataset_name)
        sound_type = agent.sound_quantizer.config["dataset"]["data_types"]
        items_sound = dataset.get_items_data(sound_type)
        
        # Create export directories for articulatory and cepstral features
        repetition_art_export_dir = "./datasets/%s/agent_art_%s" % (dataset_name, agent_name)
        repetition_cepstrum_export_dir = "./datasets/%s/agent_cepstrum_%s" % (dataset_name, agent_name)
        utils.mkdir(repetition_art_export_dir)
        utils.mkdir(repetition_cepstrum_export_dir)

        # Process each sequence and export repetitions
        for item_name, item_sound in tqdm(items_sound.items()):
            # Generate repetition using agent
            repetition = agent.repeat(item_sound)
            
            # Export estimated articulatory trajectories
            repetition_art = repetition["art_estimated"]
            repetition_art_file_path = "%s/%s.bin" % (repetition_art_export_dir, item_name)
            repetition_art.tofile(repetition_art_file_path)

            # Export repeated cepstral features
            repetition_cepstrum = repetition["sound_repeated"]
            repetition_cepstrum_file_path = "%s/%s.bin" % (repetition_cepstrum_export_dir, item_name)
            repetition_cepstrum.tofile(repetition_cepstrum_file_path)


def main():
    """
    Main function that:
    1. Loads model configurations
    2. Iterates through training runs with different random seeds
    3. Tests different jerk loss weights
    4. Exports repetitions for each model configuration
    """
    # Load final model and quantizer configurations
    final_configs = utils.read_yaml_file("communicative_agent/communicative_final_configs.yaml")
    final_quantizer_configs = utils.read_yaml_file("quantizer/quantizer_final_configs.yaml")

    # Process each model configuration
    for config_name, config in final_configs.items():
        quantizer_name = config_name.split("-")[0]
        quantizer_config = final_quantizer_configs["%s-cepstrum" % quantizer_name]

        # Iterate through training runs with different random seeds
        for i_training in range(NB_TRAINING):
            # Configure quantizer with current random seed
            quantizer_config["dataset"]["datasplit_seed"] = i_training
            quantizer_signature = utils.get_variable_signature(quantizer_config)

            # Test different jerk loss weights
            for jerk_loss_weight in JERK_LOSS_WEIGHTS:
                # Update config with current settings
                config["sound_quantizer"]["name"] = "%s-%s" % (quantizer_signature, i_training)
                config["training"]["jerk_loss_weight"] = jerk_loss_weight

                # Load and process agent
                agent_signature = utils.get_variable_signature(config)

                # is_synth_agent = "use_synth_as_direct_model" in config["model"]
                # key = "repeated"
                # if is_synth_agent:
                #     key += "_synthasdirect"
                # if jerk_loss_weight > 0:
                #     key += "_jerkloss"
                # print(key, "%s-%s" % (agent_signature, i_training))
                # continue

                agent_name = "%s-%s" % (agent_signature, i_training)
                agent_path = "out/communicative_agent/%s" % agent_name
                agent = CommunicativeAgent.reload(agent_path)
                export_agent_repetitions(agent, agent_name)


if __name__ == "__main__":
    main()
